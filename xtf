#!/bin/bash
POSIXLY_CORRECT=yes

command=list
before=""
user=""
currency=()
files=()
output=""
margin=${XTF_PROFIT:-20}

setCommand(){
  case $1 in
    list)
      return 0
    ;;
    
    list-currency)
      command=list-currency
      return 0
    ;;

    status)
      command=status
      return 0
    ;;

    profit)
      command=profit
      return 0
    ;;
  esac

  return 1
}

setFilters(){
  case $1 in
    -a)
      after="$2 $3"
      return 0
    ;;

    -b)
      before="$2 $3"
      return 0
    ;;

    -c)
      currency="${currency[@]} $2"
      return 0
  esac

  return 1
}

filterUser(){
  output=$(echo "$output" | grep -h "$user")
}

filterCurrency() {
  if [ "$currency" == "" ]; then
    return
  fi

  local string=$(echo "$output" | awk -F';' -v currency="${currency[@]}" '
    BEGIN {
        split(currency, arr, " ");
        for (i in arr) {
            currencies[arr[i]] = 1;
        }
    }
    {
        if ($3 in currencies) {
            print $0;
        }
    }
  ')

  output="$string"

  # for curr in $currency; do
  #   matches=$(echo "$output" | grep -h "$curr")
  #   if [ -n "$matches" ]; then
  #     string+="$matches"$'\n'
  #   fi
  # done

  # output="${string%$'\n'}"
}

filterAfter(){
  if [ "$after" == "" ]; then 
    return
  fi

  local IFS=$'\n'
  for line in $output; do
    date=$(echo $line | awk -F ';' '{printf "%s", $2}')
    isAfter=$(echo "$date" | awk -v afterDate="$after" '{split($0, date, /[- :]/);
      isValid = 1;

      if (date[1] > substr(afterDate, 1, 4)) {
        isValid = 0;
      } else if (date[1] == substr(afterDate, 1, 4) && date[2] > substr(afterDate, 6, 2)) {
        isValid = 0;
      } else if (date[1] == substr(afterDate, 1, 4) && date[2] == substr(afterDate, 6, 2) && date[3] > substr(afterDate, 9, 2)) {
        isValid = 0;
      } else if (date[1] == substr(afterDate, 1, 4) && date[2] == substr(afterDate, 6, 2) && date[3] == substr(afterDate, 9, 2) && date[4] > substr(afterDate, 12, 2)) {
        isValid = 0;
      } else if (date[1] == substr(afterDate, 1, 4) && date[2] == substr(afterDate, 6, 2) && date[3] == substr(afterDate, 9, 2) && date[4] == substr(afterDate, 12, 2) && date[5] > substr(afterDate, 15, 2)) {
        isValid = 0;
      } else if (date[1] == substr(afterDate, 1, 4) && date[2] == substr(afterDate, 6, 2) && date[3] == substr(afterDate, 9, 2) && date[4] == substr(afterDate, 12, 2) && date[5] == substr(afterDate, 15, 2) && date[6] >= substr(afterDate, 18, 2)) {
        isValid = 0;
      }

      print isValid;
    }')

    if [ $isAfter == 1 ]; then
      output=$(echo "$output" | grep -v "$date")
    fi
  done
}

filterBefore(){
  if [ "$before" == "" ]; then 
    return
  fi

  local IFS=$'\n'
  for line in $output; do
    date=$(echo $line | awk -F ';' '{printf "%s", $2}')
    isBefore=$(echo "$date" | awk -v beforeDate="$before" '{split($0, date, /[- :]/);
      isValid = 0;

      if (date[1] > substr(beforeDate, 1, 4)) {
        isValid = 1;
      } else if (date[1] == substr(beforeDate, 1, 4) && date[2] > substr(beforeDate, 6, 2)) {
        isValid = 1;
      } else if (date[1] == substr(beforeDate, 1, 4) && date[2] == substr(beforeDate, 6, 2) && date[3] > substr(beforeDate, 9, 2)) {
        isValid = 1;
      } else if (date[1] == substr(beforeDate, 1, 4) && date[2] == substr(beforeDate, 6, 2) && date[3] == substr(beforeDate, 9, 2) && date[4] > substr(beforeDate, 12, 2)) {
        isValid = 1;
      } else if (date[1] == substr(beforeDate, 1, 4) && date[2] == substr(beforeDate, 6, 2) && date[3] == substr(beforeDate, 9, 2) && date[4] == substr(beforeDate, 12, 2) && date[5] > substr(beforeDate, 15, 2)) {
        isValid = 1;
      } else if (date[1] == substr(beforeDate, 1, 4) && date[2] == substr(beforeDate, 6, 2) && date[3] == substr(beforeDate, 9, 2) && date[4] == substr(beforeDate, 12, 2) && date[5] == substr(beforeDate, 15, 2) && date[6] >= substr(beforeDate, 18, 2)) {
        isValid = 1;
      }

      print isValid;
    }')

    if [ $isBefore == 1 ]; then
      output=$(echo "$output" | grep -v "$date")
    fi
  done
}

listFunc(){
  echo "$output"
}

listCurrencyFunc(){
  local currencies=()
  local IFS=$'\n'

  for line in $output; do
    local isCurrency=1
    lastCurrency=$(echo $line | awk -F ';' '{printf "%s", $3}')

    for ((i=0; i<${#currencies[@]}; i++)); do
      if [ "$lastCurrency" == "${currencies[$i]}" ]; then
        isCurrency=0
        break
      fi
    done

    if [ $isCurrency == 1 ]; then
      currencies+=("$lastCurrency")
    fi

  done

  echo "${currencies[@]}" | tr ' ' '\n' | sort
}

statusFunc() {
  local currencies=()
  local currenciesValue=()
  local IFS=$'\n'

  for line in $output; do
    local isCurrency=1
    lastCurrency=$(echo "$line" | awk -F ';' '{printf "%s", $3}')
    lastValue=$(echo "$line" | awk -F ';' '{printf "%s", $4}')

    for ((i=0; i<${#currencies[@]}; i++)); do
      if [ "$lastCurrency" == "${currencies[$i]}" ]; then
        isCurrency=0
        currenciesValue[$i]=$(echo "${currenciesValue[$i]} + $lastValue" | bc)
        break
      fi
    done

    if [ $isCurrency == 1 ]; then
      currencies+=("$lastCurrency")
      currenciesValue+=("$lastValue")
    fi
  done

  local finalString=""
  for ((i=0; i<${#currencies[@]}; i++)); do
    finalString+="${currencies[$i]} : ${currenciesValue[$i]}\n"
  done

  finalString="${finalString%"\n"}"

  echo -e "$finalString" | sort
}

profitFunc() {
  local currencies=()
  local currenciesValue=()
  local IFS=$'\n'

  for line in $output; do
    local isCurrency=1
    lastCurrency=$(echo "$line" | awk -F ';' '{printf "%s", $3}')
    lastValue=$(echo "$line" | awk -F ';' '{printf "%s", $4}')

    for ((i=0; i<${#currencies[@]}; i++)); do
      if [ "$lastCurrency" == "${currencies[$i]}" ]; then
        isCurrency=0
        currenciesValue[$i]=$(echo "(${currenciesValue[$i]} + $lastValue)" | bc)
        break
      fi
    done

    if [ $isCurrency == 1 ]; then
      currencies+=("$lastCurrency")
      currenciesValue+=("$lastValue")
    fi
  done

  local finalString=""
  for ((i=0; i<${#currencies[@]}; i++)); do
    if [ "${currenciesValue[$i]}" \< 0 ]; then
        finalString+="${currencies[$i]} : ${currenciesValue[$i]}\n"
    else
        result=$(echo "scale=4; ${currenciesValue[$i]} * ((100 + ${margin}) / 100)" | bc)
        finalString+="${currencies[$i]} : $result\n"
    fi
  done

  finalString="${finalString%"\n"}"

  echo -e "$finalString" | sort
}

if [ "$#" == 0 ]; then
    echo "No arguments provided."
    exit 1
fi

for ((i=1; i<=$#; i++)); do
  arg=${!i}

  setCommand $arg
  if [ $? = 0 ]; then
    continue
  fi
  
  nextIndex=$((i+1))
  nextArg1=${!nextIndex}
  nextIndex=$((i+2))
  nextArg2=${!nextIndex}
  setFilters $arg $nextArg1 $nextArg2
  if [ $? = 0 ]; then
    ((i++))
    continue
  fi

  if [[ $arg != *".log"* && $i != $# ]]; then
    user=$arg
  else
    files+=($arg)
  fi  
done

for file in "${files[@]}"; do
  if echo "$file" | grep -q ".gz"; then
    output+=$(gzip -cd "$file")
  else
    output+=$(cat "$file" | tr -d '\0')$'\n'
  fi
done

filterUser
filterCurrency
filterBefore
filterAfter

case $command in
    list)
      listFunc
    ;;
    
    list-currency)
      listCurrencyFunc
    ;;

    status)
      statusFunc
    ;;

    profit)
      profitFunc
    ;;
esac